@page "/log"

@using System.Diagnostics.CodeAnalysis
@using NLog
@using NLog.Targets
@using System.Globalization
@using bs.Data

@inject ILogger<New> logger
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="container-fluid">
    <div class="row mx-0">
        <div class="my-1">
            Дата
            <input type="date" value="@dt.ToString("yyyy-MM-dd")" @onchange="(e) => handleInputDate(e)" />
        </div>
        <div class="row my-3 p-3 bg-primary text-white">
            <div class="col-2">
                Дата время
            </div>
            <div class="col-1">
                Уровень
            </div>
            <div class="col-3">
                Источник
            </div>
            <div class="col-6">
                Текст
            </div>
        </div>
    </div>
    <Pager @ref="pager" lines="@lines" list="@lst" 
        OnChangeLinesCallback="@SetLines">
        @foreach (GetLog o in pager.GetPage())
        {
            <div class="row my-3">
                <div class="col-2">
                    @o.Дата
                </div>
                <div class="col-1">
                    @o.Level
                </div>
                <div class="col-3 text-break">
                    @o.Source
                </div>
                <div class="col-6 text-break">
                    @o.Message
                </div>
            </div>
        }
    </Pager>
    <SaModal @ref="samodal"></SaModal>
</div>


@code {
    [AllowNull]
    Pager<GetLog> pager;
    [AllowNull]
    SaModal samodal;
    int lines;
    const string PrintLinesName = "husqvarna.ru.bs.log.lines";
    private DateTime dt = DateTime.Today;
    private List<GetLog> lst = new();
    protected async override Task OnInitializedAsync()
    {
        lst = Get(); 
        lines = await GetLines();
    }
    async Task<int> GetLines()
    {
        var ls = await localStorage.GetItemAsync<string>(PrintLinesName) ?? "10";
        return Int32.Parse(ls);
    }
    async Task SetLines(int x)
    {
        await localStorage.SetItemAsync(PrintLinesName, x.ToString());
        lines = x;
        await InvokeAsync(StateHasChanged);
    }
    private async void handleInputDate(ChangeEventArgs e)
    {
        ArgumentNullException.ThrowIfNull(e);
        dt = e.Value is null ?
            throw new NullReferenceException() :
            DateTime.Parse((string)e.Value);
        lst = Get();
        await InvokeAsync(StateHasChanged);
    }
    private List<GetLog> Get()
    {
        var rt = new List<GetLog>();
        try
        {
            var fileTarget = (FileTarget)LogManager.Configuration.FindTargetByName("logfile");
            // Need to set timestamp here if filename uses date. 
            // For example - filename="${basedir}/logs/${shortdate}/trace.log"
            var logEventInfo = new LogEventInfo { TimeStamp = dt };
            string fileName = fileTarget.FileName.Render(logEventInfo);
            if (!System.IO.File.Exists(fileName))
                return rt;
            return System.IO.File.ReadAllLines(fileName).Select((s, i) =>
            {
                var mas = s.Split('|');
                var newLog = new GetLog();
                newLog.Id = i;
                if (mas.Length == 4)
                {
                    newLog.Дата = mas[0];
                    newLog.Level = mas[1];
                    newLog.Source = mas[2];
                    newLog.Message = mas[3];
                }
                else
                {
                    newLog.Дата = "";
                    newLog.Level = "";
                    newLog.Source = "";
                    newLog.Message = mas[0];
                }
                return newLog;
            }).ToList();
        }
        catch (Exception ex)
        {
            logger.LogError(ex.Message);
            throw;
        }
    }
}
